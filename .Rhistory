n.iter = 100
n.iter = 10
n.dice = 2
sides = 6
sum.dice = FALSE
sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
colSums(results)
return(t(results))
t(results)
library(parallel)
results = unname(unlist(mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})))
n.iter = 1e6
results = unname(unlist(mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})))
library(tictoc)
tic()
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
toc()
tic()
results = unname(unlist(mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})))
toc()
head(results)
str(results)
n.iter = 10
unname(unlist(mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})))
mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
cbind(mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
cards <- c("Ace", "Deuce", "Three", "Four","Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
values <- c(0, 2:9, rep(10, 4))
deck <- expand.grid(cards=cards, suits=suits)
deck
deck$value <- values
deck
rep(seq(nrow(deck))
,1)
n.iter = 10
hand.size = 5
lapply(seq_len(n.iter), FUN = function(i) {
sample(1:52, size = hand.size, replace = FALSE)
})
results = lapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
results
mclapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
n.iter = 100
tic()
results = lapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
tic()
results = mclapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
n.iter = 1000
tic()
results = lapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
tic()
results = mclapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
n.iter = 10000
tic()
results = lapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
tic()
results = mclapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
n.iter = 100000
tic()
results = lapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
tic()
results = mclapply(seq_len(n.iter), FUN = function(i) {
deck[sample(1:52, size = hand.size, replace = FALSE),]
})
toc()
str(results)
str(results[[1]])
?stopifnot
?Error
?errormessage
??errormessage
5.5 %% 1
is.integer(5.0)
sample(1:10, size = 5.0)
n.balls = c(10,10)
n.balls %% 1 == 0
all(n.balls %% 1 == 0)
n.balls = c(10,10.2)
all(n.balls %% 1 == 0)
n.balls = c(10,10)
n.iter = 1e5, n.colors = 2,
n.colors = 2
n.balls = c(10,10)
n.drawn = 5
vapply(seq_len(n.colors), FUN = function(i) rep(i, nballs[i]), 1)
vapply(seq_len(n.colors), FUN = function(i) rep(i, n.balls[i]), 1)
vapply(seq_len(n.colors), FUN = function(i) rep(i, n.balls[i]), c(1))
lapply(seq_len(n.colors), FUN = function(i) rep(i, n.balls[i]))
sapply(seq_len(n.colors), FUN = function(i) rep(i, n.balls[i]))
unlist(lapply(seq_len(n.colors), FUN = function(i) rep(i, n.balls[i])))
replacement = FALSE
n.iter = 10
lapply(seq_len(n.iter), FUN = function(i) {
indices = sample(seq_len(total.balls), size = n.drawn, replace = replacement)
})
total.balls = sum(n.balls)
lapply(seq_len(n.iter), FUN = function(i) {
indices = sample(seq_len(total.balls), size = n.drawn, replace = replacement)
})
roll.dice = function(n.iter = 1e5, n.dice = 1, sides = 6,
sum.dice = FALSE, parallel = FALSE) {
stopifnot(n.iter %% 1 == 0 & n.iter > 0, "n.iter must be a positive integer")
stopifnot(n.dice %% 1 == 0 & n.dice > 0, "n.dice must be a positive integer")
stopifnot(sides %% 1 == 0 & sides > 0, "sides must be a positive integer")
if(!parallel) {
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
} else {
results = do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
}
if(sum.dice) {return(colSums(results))}
return(t(results))
}
roll.dice()
1e5 %% 1
n.iter > 0
n.iter %% 1 == 0 & n.iter > 0
roll.dice(n.iter = 10)
n.iter = 10
n.iter %% 1 == 0 & n.iter > 0
roll.dice = function(n.iter = 1e5, n.dice = 1, sides = 6,
sum.dice = FALSE, parallel = FALSE) {
stopifnot(n.iter %% 1 == 0 & n.iter > 0, "n.iter must be a positive integer")
stopifnot(n.dice %% 1 == 0 & n.dice > 0, "n.dice must be a positive integer")
stopifnot(sides %% 1 == 0 & sides > 0, "sides must be a positive integer")
if(!parallel) {
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
} else {
results = do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
}
if(sum.dice) {return(colSums(results))}
return(t(results))
}
n.iter %% 1 == 0 & n.iter > 0
roll.dice(n.iter = 10)
roll.dice = function(n.iter = 1e5, n.dice = 1, sides = 6,
sum.dice = FALSE, parallel = FALSE) {
stopifnot(n.iter %% 1 != 0 & n.iter <= 0, "n.iter must be a positive integer")
stopifnot(n.dice %% 1 == 0 & n.dice > 0, "n.dice must be a positive integer")
stopifnot(sides %% 1 == 0 & sides > 0, "sides must be a positive integer")
if(!parallel) {
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
} else {
results = do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
}
if(sum.dice) {return(colSums(results))}
return(t(results))
}
roll.dice(n.iter = 10)
roll.dice = function(n.iter = 1e5, n.dice = 1, sides = 6,
sum.dice = FALSE, parallel = FALSE) {
stopifnot(n.iter %% 1 == 0 & n.iter > 0)
stopifnot(n.dice %% 1 == 0 & n.dice > 0, "n.dice must be a positive integer")
stopifnot(sides %% 1 == 0 & sides > 0, "sides must be a positive integer")
if(!parallel) {
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
} else {
results = do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
}
if(sum.dice) {return(colSums(results))}
return(t(results))
}
roll.dice(n.iter = 10)
roll.dice = function(n.iter = 1e5, n.dice = 1, sides = 6,
sum.dice = FALSE, parallel = FALSE) {
stopifnot(n.iter %% 1 == 0 & n.iter > 0)
stopifnot(n.dice %% 1 == 0 & n.dice > 0)
stopifnot(sides %% 1 == 0 & sides > 0)
if(!parallel) {
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
} else {
results = do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
}
if(sum.dice) {return(colSums(results))}
return(t(results))
}
roll.dice(n.iter = 10)
roll.dice = function(n.iter = 1e5, n.dice = 1, sides = 6,
sum.dice = FALSE, parallel = FALSE) {
stopifnot(n.iter %% 1 == 0 & n.iter > 0)
stopifnot(n.dice %% 1 == 0 & n.dice > 0)
stopifnot(sides %% 1 == 0 & sides > 0)
if(!parallel) {
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
} else {
results = do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
}
if(sum.dice) {return(colSums(results))}
return(matrix(results, ncol = n.dice))
}
roll.dice(n.iter = 10)
roll.dice(n.iter = 10, sum.dice = TRUE)
roll.dice = function(n.iter = 1e5, n.dice = 1, sides = 6,
sum.dice = FALSE, parallel = FALSE) {
stopifnot(n.iter %% 1 == 0 & n.iter > 0)
stopifnot(n.dice %% 1 == 0 & n.dice > 0)
stopifnot(sides %% 1 == 0 & sides > 0)
if(!parallel) {
results = sapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)})
} else {
results = do.call(cbind, mclapply(seq_len(n.iter), FUN = function(i) {sample(seq_len(sides), size = n.dice, rep = TRUE)}))
}
if(sum.dice & n.dice > 1) {return(colSums(results))}
return(matrix(results, ncol = n.dice))
}
roll.dice(n.iter = 10, sum.dice = TRUE)
roll.dice(n.iter = 10, sum.dice = TRUE, n.dice = 2)
roll.dice(n.iter = 10, n.dice = 2)
mclapply(seq_len(n.iter), FUN = function(i) {
indices = sample(seq_len(total.balls), size = n.drawn, replace = replacement)
urn[indices]
})
urn = unlist(lapply(seq_len(n.colors), FUN = function(i) rep(i, n.balls[i])))
mclapply(seq_len(n.iter), FUN = function(i) {
indices = sample(seq_len(total.balls), size = n.drawn, replace = replacement)
urn[indices]
})
results = mclapply(seq_len(n.iter), FUN = function(i) {
indices = sample(seq_len(total.balls), size = n.drawn, replace = replacement)
urn[indices]
})
table(results)
str(results)
str(table(results[[1]]))
table(results[[1]])
?table
sapply(results, FUN = function(x) {
sapply(seq_len(n.colors), function(i) sum(x == i))
})
t(sapply(results, FUN = function(x) {
sapply(seq_len(n.colors), function(i) sum(x == i))
}))
t(sapply(results, FUN = function(x) {
vapply(seq_len(n.colors), function(i) sum(x == i),1)
}))
return(do.call(rbind, results))
results
do.call(rbind, results)
t(sapply(results, FUN = function(x) {
vapply(seq_len(n.colors), function(i) sum(x == i),1)
}))
getwd()
documents()
library(roxygen2)
documents()
library(devtools)
document()
library(Clancy.Functions)
library(Clancy.Functions)
library(Clancy.Functions)
roll.dice()
?rexp
is.null(event)
events = NULL
is.null(events)
??seq_len
times = rexp(events, rate)
rate = 1
events = 100
times = rexp(events, rate)
results = mclapply(seq_len(events), FUN = function(i) c(i, sum(times[1:i])))
library(parallel)
results = mclapply(seq_len(events), FUN = function(i) c(i, sum(times[1:i])))
results
results = mclapply(seq_len(events), FUN = function(i) c(times[i], sum(times[1:i])))
results
do.call(rbind,results)
times = rexp(time.running*rate, rate)
time.running = 100
times = rexp(time.running*rate, rate)
mclapply(seq_len(times), FUN = function(i) c(times[i], sum(times[1:i])))
seq_len(times)
times = rexp(time.running*rate, rate)
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
results
(results[[length(results)]][2]
)
results[[length(results)]][2] < time.running
times = rexp(50, rate)
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
results
results[[length(results)]][2] < time.running
times = rexp(time.running*rate*1.1, rate)
times = rexp(time.running*rate*.1, rate)
results_sub = mclapply(seq_len(length(times)), FUN = function(i) {
c(times[i], sum(times[1:i]))
})
results_sub
results_sub = mclapply(seq_len(length(times)), FUN = function(i) {
c(times[i], results[[length(results)]][2]+sum(times[1:i]))
})
results_sub
append(results,results_sub)
results = do.call(rbind,results)
results
results[results[,2] < time.running,]
times = rexp(time.running*rate, rate)
times
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
results
times = rexp(time.running*rate, rate)
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
results
times = rexp(time.running*rate, rate)
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
while(results[[length(results)]][2] < time.running) {
times = rexp(time.running*rate*.1, rate)
results_sub = mclapply(seq_len(length(times)), FUN = function(i) {
c(times[i], results[[length(results)]][2]+sum(times[1:i]))
})
results = append(results, results_sub)
}
results
results = do.call(rbind,results)
results[results[,2] < time.running,]
rexp(10, rate = 10)
events = NULL
time.running = NULL
!all(c(is.null(events), is.null(time.running)))
rate > 0
events = 10
probability = .25
times = rgeom(events, probability)
results = mclapply(seq_len(events), FUN = function(i) c(times[i], sum(times[1:i])))
results
do.call(rbind,results)
?rgeom
probabilty = .9
times = rgeom(events, probability) + 1
times
rgeom(10,.99)
rgeom(10,.9)
events
rgeom(events, probability) + 1
rgeom(events, probability) + 1
rgeom(events, probability) + 1
rgeom(events, probability) + 1
probability
results = mclapply(seq_len(events), FUN = function(i) c(times[i], sum(times[1:i])))
do.call(rbind,results)
bernoulli.process = function(probability = .5, events = NULL, time.running = NULL) {
stopifnot(!all(c(is.null(events), is.null(time.running))))
stopifnot(rate > 0)
if(is.null(time.running)) {
times = rgeom(events, probability) + 1
results = mclapply(seq_len(events), FUN = function(i) c(times[i], sum(times[1:i])))
return(do.call(rbind,results))
} else {
times = rgeom(ceiling(time.running/probability), probability)
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
while(results[[length(results)]][2] < time.running) {
times = rgeom(ceiling(time.running/probability*.1), rate)
results_sub = mclapply(seq_len(length(times)), FUN = function(i) {
c(times[i], results[[length(results)]][2]+sum(times[1:i]))
})
results = append(results, results_sub)
}
results = do.call(rbind,results)
return(results[results[,2] < time.running,])
}
}
bernoulli.process(probability = .1, time.running = 100)
100/.1
bernoulli.process = function(probability = .5, events = NULL, time.running = NULL) {
stopifnot(!all(c(is.null(events), is.null(time.running))))
stopifnot(rate > 0)
if(is.null(time.running)) {
times = rgeom(events, probability) + 1
results = mclapply(seq_len(events), FUN = function(i) c(times[i], sum(times[1:i])))
return(do.call(rbind,results))
} else {
times = rgeom(ceiling(time.running*probability), probability)+1
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
while(results[[length(results)]][2] < time.running) {
times = rgeom(ceiling(time.running*probability*.1), rate)
results_sub = mclapply(seq_len(length(times)), FUN = function(i) {
c(times[i], results[[length(results)]][2]+sum(times[1:i]))
})
results = append(results, results_sub)
}
results = do.call(rbind,results)
return(results[results[,2] < time.running,])
}
}
bernoulli.process(probability = .1, time.running = 100)
bernoulli.process = function(probability = .5, events = NULL, time.running = NULL) {
stopifnot(!all(c(is.null(events), is.null(time.running))))
stopifnot(rate > 0)
if(is.null(time.running)) {
times = rgeom(events, probability) + 1
results = mclapply(seq_len(events), FUN = function(i) c(times[i], sum(times[1:i])))
return(do.call(rbind,results))
} else {
times = rgeom(ceiling(time.running*probability), probability)+1
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
while(results[[length(results)]][2] < time.running) {
times = rgeom(ceiling(time.running*probability*.25), rate)
results_sub = mclapply(seq_len(length(times)), FUN = function(i) {
c(times[i], results[[length(results)]][2]+sum(times[1:i]))
})
results = append(results, results_sub)
}
results = do.call(rbind,results)
return(results[results[,2] < time.running,])
}
}
bernoulli.process(probability = .1, time.running = 100)
probability = .1
time.running = 100
times = rgeom(ceiling(time.running*probability), probability)+1
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
results
ceiling(time.running*probability*.25)
results[[length(results)]][2] < time.running
max(c(10,ceiling(time.running*probability*.25))
)
times = rgeom(max(c(10,ceiling(time.running*probability*.25))), rate)
bernoulli.process = function(probability = .5, events = NULL, time.running = NULL) {
stopifnot(!all(c(is.null(events), is.null(time.running))))
stopifnot(rate > 0)
if(is.null(time.running)) {
times = rgeom(events, probability) + 1
results = mclapply(seq_len(events), FUN = function(i) c(times[i], sum(times[1:i])))
return(do.call(rbind,results))
} else {
times = rgeom(ceiling(time.running*probability), probability)+1
results = mclapply(seq_len(length(times)), FUN = function(i) c(times[i], sum(times[1:i])))
while(results[[length(results)]][2] < time.running) {
times = rgeom(max(c(10,ceiling(time.running*probability*.25))), probability) + 1
results_sub = mclapply(seq_len(length(times)), FUN = function(i) {
c(times[i], results[[length(results)]][2]+sum(times[1:i]))
})
results = append(results, results_sub)
}
results = do.call(rbind,results)
return(results[results[,2] < time.running,])
}
}
times = rgeom(max(c(10,ceiling(time.running*probability*.25))), rate)
bernoulli.process(probability = .1, time.running = 100)
bernoulli.process(probability = .9, time.running = 100)
library(Clancy.Functions)
library(Clancy.Functions)
library(Clancy.Functions)
?pairs
library(Clancy.Functions)
library(Clancy.Functions)
data("iris")
pairs(iris, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, cex.cor, include.p = FALSE, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
# correlation coefficient
r <- cor(x, y)
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste("r= ", txt, sep = "")
text(0.5, 0.6, txt)
if(include.p){
# p-value calculation
p <- cor.test(x, y)$p.value
txt2 <- format(c(p, 0.123456789), digits = digits)[1]
txt2 <- paste("p= ", txt2, sep = "")
if(p<0.01) txt2 <- paste("p= ", "<0.01", sep = "")
text(0.5, 0.4, txt2)
}
}
pairs(iris, upper.panel = panel.cor)
library(Clancy.Functions)
